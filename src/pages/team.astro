---
import Main from '../layout/main.astro'
import def from '/team/default.jpeg'
import hero from '/hero_page.jpg'
import earth_texture from "/team/earth.jpg"



import team from "/team/team_temp.jpg"

---
<style>

*, *:before, *:after {
  box-sizing: inherit;
}

.column {
  float: left;
  width: 25%;
  margin-bottom: 16px;
  padding: 0 8px;
}
image{

}

@media screen and (max-width: 650px) {
  .column {
    width: 100%;
    display: block;
  }
}

.card {
    color:white;
    background-color: #000;
    box-shadow: 0 5px 0px 0 rgba(39, 39, 39, 0.2);
}

.container {
  padding: 0 16px;
}
 .container{
  margin: 0 auto;
  max-width: 80%;
 }

.container::after, .row::after {
  content: "";
  clear: both;
  display: table;
}

.title {
  color: grey;
}

.button {
  border: none;
  outline: 0;
  display: inline-block;
  padding: 8px;
  color: white;
  background-color: var(--accent_mid);
  text-align: center;
  cursor: pointer;
  width: 100%;
}

.button:hover {
  background-color: #555;
}
.vip_image{
    max-width: 400px;
    display: block;
    margin: 0 auto;
    margin-bottom: 25px;
    padding-top: 25px;
    align-items: center;
}
.row{
    margin: 0 auto;
    margin-top: var(--margin-top-standart);
    max-width: 80%;
    align-items: center;
}
#globe {
  width: 100%;
  height: 100%;
  overflow : scroll;
  display: flex;
  align-items: center;
  position: relative;
  text-align: center;
  color: white;
}
#text{

  position: absolute;
  top: 75%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-size: 50px;

}
.grid-2-col{
  display: grid;
  place-items: center;
  align-items: center;
  min-height: 10vh;
  
  max-width: 80%;
  margin: 0 auto;
  margin-top: var(--margin-top-standart);
  grid-template-columns: 1fr 1fr;
  margin-bottom: 50px;
}
.container{
  max-width: 60%;
}
/* mobile rules */
@media only screen and (max-width: 800px) {
  .section{
    grid-template-columns: 1fr;
  }
  .grid-2-col{
    grid-template-columns: 1fr;
  }
  .section-text{
    color: var(--text);
    grid-column:span 1;
    order: 1;
  }
  .section-image{
    grid-column:span 1;
  }
}



</style>

<head>
  <script is:inline src="https://cdn.jsdelivr.net/npm/three@0.119.1/build/three.min.js"></script>
</head>

<Main>

  <div id = 'globe' class="hero">
    <div id="text">Meet our international team</div>
  </div>


  <div class="container">
    <div class="grid-2-col">
      <img src={team} alt="team_temp.jpg">
      <p style = "color:white ; margin-left:25px;">Our multicultural team in the workplace is made up of individuals from a diverse range of backgrounds, cultures, and experiences. This diversity allows us to bring unique perspectives and ideas to the table, helping to foster creativity and innovation in our work. Having a multicultural team also allows us to better understand and serve our clients and customers, many of whom come from different backgrounds themselves. By valuing and respecting the individual experiences and perspectives of each team member, we are able to create a positive and inclusive work environment where everyone feels welcome and respected.</p>
    </div>
  </div>



<div class="row">
  <div class="column">
    <div class="card">
      <img class = 'vip_image' src={def} alt="Jane">
      <div class="container">
        <h2>Bakhtiyor Sattorov</h2>
        <p class="title">CEO & Founder</p>
        <p>Some text that describes me lorem ipsum ipsum lorem.</p>
        <p>example@example.com</p>
        <p><button class="button">Contact</button></p>
      </div>
    </div>
  </div>

  <div class="column">
    <div class="card">
      <img  class = 'vip_image' src={def} alt="Mike" >
      <div class="container">
        <h2>Sam</h2>
        <p class="title">CTO</p>
        <p>Some text that describes me lorem ipsum ipsum lorem.</p>
        <p>example@example.com</p>
        <p><button class="button">Contact</button></p>
      </div>
    </div>
  </div>
  
  <div class="column">
    <div class="card">
      <img src={def} alt="John" class = 'vip_image'>
      <div class="container">
        <h2>Ivan Tsurkan</h2>
        <p class="title">Designer</p>
        <p>Some text that describes me lorem ipsum ipsum lorem.</p>
        <p>example@example.com</p>
        <p><button class="button">Contact</button></p>
      </div>
    </div>
  </div>

  <div class="column">
    <div class="card">
      <img src={def} alt="John" class = 'vip_image'>
      <div class="container">
        <h2>Olga Lieskova</h2>
        <p class="title">Accountant</p>
        <p>Some text that describes me lorem ipsum ipsum lorem.</p>
        <p>example@example.com</p>
        <p><button class="button">Contact</button></p>
      </div>
    </div>
  </div>

</div>




<script is:inline define:vars={{ earth_texture}}>
    
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.z = 5;

    const renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);

    document.getElementById("globe").appendChild(renderer.domElement);

    // Create the Earth earth
    const earthGeometry = new THREE.SphereGeometry(1.5, 64, 64);
    const earthMaterial = new THREE.MeshBasicMaterial({
      map: new THREE.TextureLoader().load(earth_texture)
    });
    const earth = new THREE.Mesh(earthGeometry, earthMaterial);
    scene.add(earth);
    
    // Add event listeners to rotate the earth on mouse or touch input
    let isDragging = false;
    let touched = false;
    let previousMousePosition = { x: 0, y: 0 };

    const onDocumentMouseDown = ( event ) => {
   
      isDragging = true;
      previousMousePosition = {
        x: event.clientX,
        y: event.clientY
      };
    }

    const onDocumentMouseUp = ( event ) => {

      isDragging = false;
    }

    const onDocumentMouseMove = ( event ) => {
      if ( isDragging ) {
        const deltaMove = {
          x: event.clientX - previousMousePosition.x,
          y: event.clientY - previousMousePosition.y
        };


        earth.rotation.y += deltaMove.x * 0.01;

        previousMousePosition = {
          x: event.clientX,
          y: event.clientY
        };
      }
    }

    document.addEventListener( 'mousedown', onDocumentMouseDown, false );
    document.addEventListener( 'mouseup', onDocumentMouseUp, false );
    document.addEventListener( 'mousemove', onDocumentMouseMove, false );

    // You can also add touch event listeners for mobile devices
    document.addEventListener( 'touchstart', onDocumentMouseDown, false );
    document.addEventListener( 'touchend', onDocumentMouseUp, false );
    document.addEventListener( 'touchmove', onDocumentMouseMove, false );

    window.addEventListener( 'resize', function() {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();

      renderer.setSize( window.innerWidth, window.innerHeight )
    })

    // Finally, we animate the scene by updating the renderer
    const animate = () => {
      requestAnimationFrame( animate );
      earth.rotation.y += 0.001;
      renderer.render( scene, camera );
    };

    animate(); 

</script>
</Main>
